continue
case self.brandx when 'CANON' return
case self.brandx
self.brandx
self
continue
case self.brandx
continue
contrienu
continuecontineucontienu
continue
validates :ninventary, uniqueness: {message: "ya ha sido usado"} unless: :ninventary
validates :ninventary, uniqueness: {message: "ya ha sido usado"}
continue
next
continue
validate :ninventary
validates
validate
:ninventary
continue
self
self.ninventary
self
validates :ninventary, uniqueness: {message: "ya ha sido usado"} unless self.ninventary.blank?
sel
continue
next
continue
next
continue
next
continue
params
continue
@brand_model
continue
@models
 next
continue
@models
@modesl
next
@models
continue
@models
next
params
rm
prm
aaaas:aam
prasprsd
continue
params
continue
next
continue
e
continue
argus.each { |a| element.send(a) }
argus.each |a| do
argus.each do |a|
argus.each |a| do
a
element.send(a)
argus.each { |a| puts a }
argus
exit
end
halt
next
continue
next
p
continue
next
p.class
properties.class
properties
p
element.class
continue
next
continue
IPAddress.valid? ipwifi
IPAddress.valid?ipwifi
ipwifi.class
ipwifi
IPAddress.valid?
IPAddress.valid
IPAddress
continue
contineui
continue
IPAddress
continue
element.'name'.to_sym
element.methods[xess].to_sym
element.element.methods[xess].to_sym
element.element.methods[xess]
element.methods[xess].class
element.methods[xess]
xess
continue
continur
element.methods.each {|m|  puts number if m == 'name'.to_sym number= number + 1 }
element.methods.each {|m|  puts number if m == 'name'.to_sym number+=1 }
number = 0
i = 0
element.methods.each {|m| puts 'bingo' if m == 'name'.to_sym }
element.methods.each do |m|
element.methods.grep /p/
p.to_sym
element.methods.grep /p.to_sym/
element.methods.grep /p/
p
element.methods.grep /p/
element.methods.grep /p.to_s/
element.methods.grep /p/
p = 'name'
'p = name0
p = name
element.methods.grep /name/
element.name
element.name_was
(element.name_was
(element.public_methods - Object.public_methods).name_was
(element.public_methods - Object.public_methods).sort.grep /name/
(element.public_methods - Object.public_methods).grep
(element.public_methods - Object.public_methods).sort.grep
(element.public_methods - Object.public_methods).sort
element.public_methods - Object.public_methods
element.instance_methods
element.instance
Dependecy.instance_methods
pop = element.methods.each { |m| if m /name/ puts 'yey' }
pop = element.methods.each { |m| puts m }
pop = element.methods.each { |m| puts 'bingo' if m ~= 'name' }
pop = element.methods.each { |m| puts 'bingo' if m == 'name' }
pop = element.methods.each { |m| puts m if m == 'name' }
pop = element.methods[0]
pop = element.methods['name'].to_s
pop = element.methods['name']
i = element.methods['name']
element.methods['name']
element.methods.grep /ind/
element.methods.length
Dependecy.methods
element.class
element.public_methods.name_changed?
element.public_methods.instance_variable_names
element.public_methods.grep /name/
element.private_methods.grep /name/
element.public_methods.grep /name/
element.public_methods
element.methods.grep /method/
element.name.class
element.name.methods
element.name
element.name?
element.public_methods.grep /name/
element.public_methods
element.methods.grep /method/
element.instance_methods
element@active_record
element.@active_record
element.active_record
element.instance_values.grep /:name/
element.instance_values.grep /name/
element.instance_values
element.methods.grep /ins/
element.instance_methods
element.instance_method[0]
element.instance_methods[0]
element.methods[0]
element.methods.grep /\[/
element.methods.grep /[/
element.methods.length
element.
element[0]
element.fields[0].to_sym
element.fields[0]
fields[0].class
fields[0]
list
element.class
element.class?
element.class
element.methods.grep /len/
element.methods
element
element.methods
fields.each { |e|  e.to_sym element.e}
fields.each { |e|  e.to_sym }
fields.each { |e|  e.to_sym! }
fields.each { |e|  e.to_sym }
fields.each { |e|  e.to_sym 
fields.each { |e| puts e.to_sym 
fields.each { |e| puts element.e.to_sym }
e
element.name
fields.each { |e| puts element.e }
fields.each do |e|
fields.each do
fields.eaach |e| do
fields.each do |e|
fields.each |e| do
fields.each { |e| puts e }
fields[0]
fields.length
element
continue
element
continue
next
upsme(@dependency)
upsme
DependenciesController.methods.grep /ups/
DependenciesController.methods.grep/ups/
DependenciesController.methods
@dependency.methods.grep /ups/
@dependency.methods.grep /up/
continue
@computer.nfactura.upcase!
@computer.nfactura
@computer.nfactura.upcase!
@computer.nserie.upcase!
@computer.nserie.methods.upcase!
@computer.nserie.methods.grep /case/
@computer.nserie
@computer.nseria
@computer
c
params
c
params
params[:Delegation_id]
params[:Delegation]
Dependency.all.where(Delegation: @delegation)
c
n
@delegation
n
params
c
@filterrific.class
params[:filterrific]
:filterrific
params
@filterrific.find
@filterrific
c
@dependencies
n
@dependencies
n
