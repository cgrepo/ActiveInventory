continue
@computer.nfactura.upcase!
@computer.nfactura
@computer.nfactura.upcase!
@computer.nserie.upcase!
@computer.nserie.methods.upcase!
@computer.nserie.methods.grep /case/
@computer.nserie
@computer.nseria
@computer
c
params
c
params
params[:Delegation_id]
params[:Delegation]
Dependency.all.where(Delegation: @delegation)
c
n
@delegation
n
params
c
@filterrific.class
params[:filterrific]
:filterrific
params
@filterrific.find
@filterrific
c
@dependencies
n
@dependencies
n
c
@Dependencies
c
@filterrific
c
@statistic
c
n 20
n
l
params.require(:statistic).permit(:month, :sheets, :consumable, :Delegation_id, :Dependency_id, :Copier_id, :Printer_id)
params.require(:statistic)
:statistic.class
:statistic
params.require
params
c
n 100
n
l
params
self[:statistic]
self.statistic
statistic
:statistic[Delegation_id]
:statistic
statistic
c
params
statistic_params
c
@printers.each { |printer| puts printer.id }
@printers.each { |printer| puts printe.id }
@printers.count
@printers
@copiers
c
params
c
self
self.Copier_id.blank?
self.Copier_id
self.Copier
c
params
c
copier_params
params
c
copier_params
c
bluetooth_set?
l
bluetooth == '1'
bluetooth
bluetootk
c
n
l
bluetooth
n
c
bluetooth
c
class_variable_defined?
self.methods.grep /var/
self.methods
self.methods.grep /blue/
self.method.grep /blu/
:bluetooth?
:bluetooth.true
:bluetooth
c
continue
class_variable
class_variable_
instance_variable_names
methods.grep /var/
methods.grep /if/
methods.grep /blu/
methods
[:ninventary]
[ninventary]}
:ninventary.
:ninventary[0..4]
:ninventary[0..1]
:ninventary[0]
:ninventary
ninventary
 "bluetooth.nil?"
if "bluetooth.nil?"
if: "bluetooth.nil?"
if: "bluetooth"
@bluetooth
bluetooth
methods
params
computer_params
:bluetooth
self.bluetooth
bluetooth
c
c}
computer_params[:bluetooth]
computer_params.methods.grep /blue/
computer_params.methods
computer_params.class
computer_params.bluetooth
computer_params[10]
computer_params[5]
computer_params[bluetooth]
bluetooth
computer_params[bluetooth]
computer_params.bluetooth
computer_params
c
n 100
n
c
self.Delegation.blank?
self.Delegation
self.ninventary
self.Dependecy_id
self.class
.class
class
methods
computer_params
@computer.params
@computer
params
name
maskwifi
c
Delegation_id
Computer
Dependency_id
c
Depenendecy_id
processor
processor.class
ninventary.class
:ninventary
ninventary:
@computer
c
Dependency_id
Dependency
list
ls
computer_params
params
Network_id
ninventary
c
Params
params
Delegation.class
Delegation_id.blank?
Delegation.blank?
Delegation_id
Delegation.blank
Delegation
ninventary
c
params[:Delegation_id].blank?
params[:Delegation_id]
params[:Delegation]
params
worker_params
c
@models.first.modelx
@models.first.brandx
@models.brandx
@models
c
@models.class
@models
c
@models
n
c
params
c
@printers.count
@printers.nil?
@printers
@copiers
c
n 100
n 50
n 30
n
l
@dependencies.each { |d| puts d.Delegation_id }
@dependencies.class
@dependencies.Delegations_id
@dependencies.Delegations
@dependencies.Delegation_id
@dependencies
c
n
@service_request
c
service_request_params[:Delegation_id]
service_request_params
params[:service_request][:Dependency_id]
params[:service_request]
params[:utf8]
params
params[:Delegation_id]
params.each { |p,v| puts p,v }
params.each { |p| puts p }
params
params[:Delegation_id]
params[:Delegation:id]
params[:Delegation]
params
@service_request
n
service_request_params
c
