c
telephone_params
telephone.params
c
telephone_params[:ip]
telephone_params[:ip]}
telephone_params[:ip].clear
telephone_params[:ip].methods
telephone_params[:ip]
telephone_params[:ip] = ''
telephone_params[:ip]
telephone_params
c
true unless telephone_params[:genus] == "VOIP"
true if telephone_params[:genus] == "VOIP"
telephone_params[:genus] == "VOIP"
telephone_params[:genus] 
telephone_params[:genus] == "VOIP"
true if telephone_params[:genus] == "VOIP"
c
telephone_params[:genus]
telephone_params.genus
telephone_params
c
telephone_params
c
telephone_params[:Dependency_id]
telephone_params
c
n
c
n 100
n 50
n 30
n 20
n
c
@consumable
n
@consumable.User_id.nil?
current_user.id
@consumable.User_id
n
c
current_user.id
currente_user.id
@consumable.User_id
c
@consumable.User_id
@consumable.User
n
s
c
@consumable.User_id 
@consumable.User_id
@consumable.User
@consumable
s
@consumable
c
n
c
l
@consumable
n
consumable_params
c
n
l
consumable_params.merge!(User_id:current_user.id)
consumable_params.merge!(User_id:current_user)
consumable_params.merge!(User_id:current_customer)
Consumable
consumable_params.merge!(User_id:current_customer)
consumable_params.merge!(User_id:currente_customer)
consumable_params
current_user.id
current_user
list
consumable_params
consumable_params.methods
consumable_params.class
consumable_params
c
params.class
params
@consumable
c
n
l
nil == false
nil == False
@consumable
puts "HEY" unless @consumable.nil?
puts "HEY" unless @consumable
@consumable
c
list
@consumable.nil?
@consumable
c
@dependency.save!
@dependency!
@dependency.User = current_user
@dependency.User
current_user.id
current_user
self.current_user.id
self.current_user
@current_user
@dependency.User_id
c
@dependecy
@current_user
c
n
@network
n
@network
self.set_executor(@network)
self.methods
self
self.set_me
::set_executor(@network)
::set_executor
P = ApplicationController.new
P.class
P = ApplicationController
ApplicationController.class
ApplicationController
set_me
n
network_params
set_me
set_executor
super.set_executor
set_executor
NetworkController.responder
responder
methods.grep /respond/
class
methods.grep /executor/
methods
set_executor
p = NetworkController.new
p = NetworkController
NetworkController
NetworkController.methods
NetworkController.methods.grep /executor/
list
NetworksController.set_executor
NetworksController.super
NetworksController.methods.grep /set/
NetworksController.methods.grep /executor/
NetworksController.methods
NetworksController
c
@network.methods.grep /executor/
@network.methods.grep /set/
@network
c
Network.first.User.username
Network.first.User_id.username
Network.first.User_id
Network.first.User
Network.first
Network.all
@entity.save!
@entity.User_id
@entity.pluck(:User_id)
@entity
c
network_params
c
n 
n 100
n 50
n50
n 30
n30
n 20
n 5
n5
n 5
n
@entity
c
n
s
n
s
@entity.User_id
n
c
@entity.User_id
n
c
n
s
c
n
@entity.User_id
n
@entity.User_id
c
n
@entity.User_id
@entity.id
n
c
@entity.User_id?
@entity.USer_id?
n
entity.User_id.methods
entity.User_id
c
n
c
p.User_id?
p.methods.grep /User/
p.User_id.username
p.User_id
p.class
p.User.username
p.User
p = Computer.first
Computer.user
Computer.User
Computer.all
entity
entity.User_id
entity.User
entity
n
c
n
@entity.User_id.nil?
@entity.User_id.blank?
@entity.User_id.nil?
@entity.User_id
@entity.User
@entity
n
@entity
c
s
c
n
l
User.find(session[:user_id]).id
@entity.class
User.find(session[:user_id]).class
User.find(session[:user_id])..class
User.find(session[:user_id])
@entity.User_id
@entity.User
